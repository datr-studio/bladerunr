% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/blade_setup.R
\name{blade_setup}
\alias{blade_setup}
\title{Setup bladerunr}
\usage{
blade_setup(
  run_name,
  runr,
  pre_runrs = NULL,
  post_runrs = NULL,
  output_dir = NULL
)
}
\arguments{
\item{run_name}{The name of the run. Used for output folder naming.}

\item{runr}{A single function to be executed as the main test. Function may produce side-effects, or return a value. Any value returned is passed to the post_runrs.}

\item{pre_runrs}{A function or list of functions to execute \emph{before} each model run. These functions should be caused for side-effects and will each receive a list of all the model params for the given run as input. Each will be executed at every iteration. Optional.}

\item{post_runrs}{A function or list of functions to execute \emph{after} each model run. If the main runr returned a value, it will be passed to each of these functions. Each will be executed at every iteration; and, if the user specifies an \code{output_dir}, this value will be passed to to each function. Optional.}

\item{output_dir}{A path to be given to the \code{post_runrs}, if required. Optional.}
}
\description{
\code{blade_setup()} is required to set up the model runs. Its job is to specify the functions you want to repeat for each iteration of your grid search.
}
\details{
There are three types of callbacks bladerunr can use at each iteration: pre-runrs, runrs, and post-runrs. This enables the user to break up their functions into smaller chunks. It also expects that the model may involve files being generated, either as inputs, outputs, or both; the callbacks enable the user to deal with these as they wish.
}
\examples{

foo_before <- function(params) {
  # Do some setup work
}
foo_run <- function() {
  # Do some fancy stuff
}
foo_after <- function() {
  # Transform and save model results
}

blade_setup("test-run", foo_before, foo_run, foo_after, "path/to/save/outputs")
}
